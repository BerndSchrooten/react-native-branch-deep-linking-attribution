actions_path("lib/actions")

fastlane_version "2.69.0"

default_platform :ios

platform :android do
  desc "Run Android unit tests"
  lane :test do
    # for development on a Mac. Override with the env. var.
    ENV['ANDROID_HOME'] ||= "#{ENV['HOME']}/Library/Android/sdk"
    gradle task: "test", project_dir: "native-tests/android"
  end
end

platform :ios do
  # fastlane ios test [opts]
  # opts:
  # verbose:[yes|no] (REACT_NATIVE_BRANCH_VERBOSE env. var., default: no)
  # repo_update:[yes|no] (REACT_NATIVE_BRANCH_REPO_UPDATE env. var., default: yes)
  desc "Run iOS unit tests"
  lane :test do |opts|
    helper = UpdateHelper

    # Options
    verbose = opts[:verbose]
    verbose = verbose.nil? ? helper.boolean_env_var?(:REACT_NATIVE_BRANCH_VERBOSE, default_value: false) : verbose

    repo_update = opts[:repo_update]
    repo_update = repo_update.nil? ? helper.boolean_env_var?(:REACT_NATIVE_BRANCH_REPO_UPDATE, default_value: true) : repo_update

    # Make sure Pods are installed for native-tests before running scan
    podfile_path = File.expand_path('../native-tests/ios', __dir__)
    helper.pod_install_if_required podfile_path, verbose: verbose, repo_update: repo_update

    scan
  end
end

desc "Update NPM deps"
lane :npm_update do
  helper = UpdateHelper

  %w[
    .
    browser_example
    testbed_native_android
    testbed_native_ios
    testbed_simple
    webview_example
    webview_example_carthage
    webview_example_native_ios
    webview_tutorial
  ].each do |ex|
    path = case ex
    when '.'
      ex
    else
      "examples/#{ex}"
    end

    Dir.chdir File.expand_path("../#{path}", __dir__) do |folder|
      UI.message "Updating #{ex}"

      # Just remove both lockfiles to force package resolution in both cases.
      # Since npm and yarn run back-to-back, the package resolution should be
      # roughly the same in each newly-generated lockfile.
      FileUtils.rm_f %w[package-lock.json yarn.lock]

      # yarn install before npm install
      # yarn complains about package-lock.json, but not the other way around
      UI.message 'Removing node_modules before yarn install'

      FileUtils.rm_rf 'node_modules'
      yarn package_path: "#{folder}/package.json"

      UI.message 'Removing node_modules before npm install'

      FileUtils.rm_rf 'node_modules'
      helper.sh 'npm', 'install'

      # Not having much luck with builtin git actions
      helper.sh 'git', 'add', '.'

      UI.message 'Cleaning up'

      FileUtils.rm_rf 'node_modules'

      UI.message 'Done âœ…'
    end
  end

  helper.sh 'git', 'commit', '-m[Fastlane] Updated all JS lockfiles', chdir: '..'
end

desc "Update native SDKs"
lane :native_update do
  update_native_sdks
  # update_native_sdks(
  #   android_checkout: "2.14.0" , # any commit, branch or tag in the Android repo. Default: latest tag
  #   ios_checkout:     "0.21.11", # any commit, branch or tag in the iOS repo. Default: latest tag
  #   commit:               false, # Don't commit the results. Default: true
  #   verbose:               true  # Generate verbose output. Default: false
  # )
end

# Examples:
# bundle exec fastlane bump # patch increment
# bundle exec fastlane bump version:2.3.0 # update to any specific version
# bundle exec fastlane bump tag:yes # add a tag after committing
# bundle exec fastlane bump repo_update:no # Don't update CocoaPods repo
desc "Increment version number"
lane :bump do |opts|
  version_bump opts
end
